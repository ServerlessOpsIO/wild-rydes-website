env:
  global:
    - DIST_DIR="${PWD}/dist"
    - PROJECT_NAME=$(basename ${PWD})
    - ARTIFACT="${TRAVIS_BUILD_NUMBER}-${TRAVIS_COMMIT}.zip"
    - S3_BUCKET_PREFIX="serverlessops-deploy"
    - S3_BUCKET_DEV="${S3_BUCKET_PREFIX}-training-dev"
    - S3_BUCKET_PROD="${S3_BUCKET_PREFIX}-training-prod"
    - AWS_REGION=us-east-1
    # AWS_ACCESS_KEY_ID_DEV
    - secure: "qeyqmUvBR9VBIgulHvwTWNuqFNhZXSbphPjXYuq7iwMm4BaYTKqSdIe1ksRgE1L4TDN9Pi2CcDbvlC47zHwD6UsM65W7c1OUH/MrKNGLhLcQmhbAjHAds5qNlsjvvQdqxZbc5mV+xw/YoAtC3J0TxYPgDRyrg5jZi2uVbYJzwJrZ3dIfg47iHU4k9foa4+2Phn876GYK3xFoajMtEoW+8kTBwn4+BLd4xQ/TXUOoqkpOVmOtcvSpPb6B6ZjJWFn5vxelh/3uO4RgxpMKP5wgJlPH0AArKa5KMX/h3u2e4Trqty8LLw9YBaVrM4aRA4vouKMZcZcBQk/7YkNmaT+xfUyPbN4GY7ERgDeA4iDPbEoaC1Y6xTXIfOy8ikjMZHoYdPnK983K5rAXXa0Of2TxezBTu5NbuD4fEnh2yA9AkSbihg6AmlBwdHQWNaIZqvowIoWkqr5H/29tSl4zGAHrg9CgfTrVZZI/K9d8Bgh89PDWlwaOUOYNvenKeVLvCTso86r95PMc+OwaIU+pUUDc+8B6s22JEO0WWfEDWf9+LxOJkIC8dcS9vf7YSHQEUqCIKhOoBSCF23HO1py4CwEq3FLM6j/qpRZSJg14rehOqsGB8fDjn5b8XSY01p7vupikkXJMKQJsVyQsAd1r0NsdPPKcU303T5u89Ke8s+NhtZw="
    # AWS_SECRET_ACCESS_KEY_DEV
    - secure: "osHZNQ7qLLcMeeWXPhiqOMupgddRhtp3i9vnL1I45kB6FHMRX1RSXrehsQpuFN1f5DEyR2DfsVyyDXzt2ExOvzi6O6hW3AKA6oleNOBJCz0odbP/PIEeyPS2U88iZWOfxiEU1HYAamPVW02w/IqKia4GZpAHELL/KvasO8/amzzVFwupTAJozk5r4n8eq5PTmXmR5Jznc7AUrNf937YE99QEvb/josG5tD7QH3/EZSaefmu7hW4eB38ewf2F0/2snyTO2+MASBZnHn63ZAJaauDyoZEZq838JzNjWnqQ+VM5zYOgns7nsICVBofwbNcrjSakcI0cwILPf/VHicfEhmSNu7uK8337NpMUZ4fkVd0RLQ0/OjL7hysG7VoYArSFBKvBve4dcOkT0xwh8E2P2A2twJA73s7CwvipX+ibTMvduna/BpP5M0/e9vsNVrI549OoGsDgRKVmb2vQUKgLTHXLAkz7UCZMDDq269D6k5QEOf0no0xPLSw2Bl67+hnHj3qpwXXk5wxNri6NdmgtyiMmxJdCC7pVC5K4JJmeb16hfoUn1958roMIUUwogjKgMxXYu5Nd9TKhiKIXC4thdx5JuZ4KDGQiURx8PNdr2fTAvHXswtAp/7d0r40oReqhS4k9qOpZgCZuVc00114P+/VPAtMVoDAJl298TImR9Gk="
    # AWS_ACCESS_KEY_ID_PROD
    - secure: "s/mWRrTB9pOI1ZZE1r049RMDKcjvjOzT+tibrBzdC542JkCEVjrk5Uk/UzjJBD/7UydwfITRyvUOJN3KMBJU2gRqmP1j/mbCzl/7ff63a08xLq/6q92T1IyIcgLRJxoHSGeNqT+GXJJQ0G9eLgbqV86VIK77kxVcZde0nMxCz4tPelXpWW347SaZa71n4bMJQHVrRPAHVY5g3w+xbv+zzwx19z3m1DYUCe174V0kbL4U0bkl3kmVyK6tkqoOcuBsORalcEdAntUYkWPoNk/SwC5+KFsudy0wH9g1pqRclNbPyWXrTTZJrlb4K9Cs3mK7p3iExAoJcFU1b8unCK0qRjv4TscGY2LFoaTImpnIjiyGwxQ5FnhpSDb+TNNhTV0Rkrcsrcq8O7Y2wbrzguHNLlN9J9nFW2/A+jSsQ3+dP6PDmpG1D2er6TB6i+NKPgSUC7wcCrg3j/uFrEB5swxwTbi0C9xxIkkFQZxc0eP2HU/6NQnfzzewhVf/+hxfijaw9jnnELqnvEZaXtjhGNdaiL+xmFJ85X23Ozk/1URcH6hsaTICiaA/1PjUmd2aQej+3UMZKXlnqwQzz0oY1TlWUDHg7D4m9ohrNbgZeH3hJXRTKO2GK/MiQJvPomEYdLWTxFI7dtAjLiJEbIjfr0VI49z8weG6MWFK3aSM6iyX4z0="
    # AWS_SECRET_ACCESS_KEY_PROD
    - secure: "mnymFkD59H4dLNDesWVGr40ST1cvWxBccCw/GLoTQ5fsoVsVmyhzjRA8f4cXl9zZq3d6mVpkzDd+92ulkuHwkTcWLQyGD1TBLho8B1uToaIeqN0kK4xHdAk/t5TSG15EzOExgKizfuPnr1I9YziZENkLHMvlq9XLL1aPSgDoX7ViYi7/k/mI0i9spl4wqVwjgEh7aZAwzG4xNnManRhCDgnffwbD9YpvWDdkAzZlYKgqTShj8CYC31EZVwSiH/QAvjHRguScJ/tjufUGgBj4PWHa6+L0TgKkJB5ZNMqX3Oz/sYt9GqyqUtUFoWZAOm8z8NBSVpV7s38E2SVmrhbDIbd594P/J2+OvVIfVjOCLL41rEntWRQTkQWAS6GNtKS3nquxwJv1Lo3gepdMfZKn7fLg8iRzs0ZwXboWs6CmQF5TDiDcXsdV7R61MOcAOFcD/pgRu+uLcHHh8wDvf0p2MkwC0PPXcvYrXmlmtcUKm638fKqDPHaZrfQijuXkUxadTmsbeajB8gPX5i7IxvQz0jV6Y1I1ht/eZRBHic3HQhfeBgOOc/sbLsdYdMriLxZQLlW/7WInp0jansfMy9smz0sUQptewNS1inomOevlCD9rsykVffAPIDdvijMefglxu+0YkL/dACQUgKcQ5Eqj1NZKEGYkGgaBXnUQENTIuKk="

stages:
  - build
  - name: deploy-dev
    if: branch = master
  - name: promote-to-prod
    if: branch = master
  - name: deploy-prod
    if: branch = master

jobs:
  include:
    - stage: build
      sudo: required
      services:
        - docker
      language: python
      python: '3.6'
      install:
        - npm install -g serverless
      script: true
      before_deploy:
        - npm install
        # The stage here doesn't really matter. We just want to ensure that
        # template is valid and assemble our dependencies.
        - sls package -v -s deploy -r ${AWS_REGION}
        - mkdir $DIST_DIR
        - zip -r dist/${ARTIFACT} ./ -x '*.git*' -x $DIST_DIR
      deploy:
        - provider: s3
          skip_cleanup: true
          bucket: "${S3_BUCKET_DEV}"
          upload_dir: "${PROJECT_NAME}"
          local_dir: "$DIST_DIR"
          acl: private
          access_key_id: "$AWS_ACCESS_KEY_ID_DEV"
          secret_access_key: "$AWS_SECRET_ACCESS_KEY_DEV"

    - stage: deploy-dev
      sudo: required
      services:
        - docker
      language: python
      python: '3.6'
      install:
        - pip install awscli
        # Our SLS setup expects to find an AWS profile so let's just manage
        # our creds this way.
        - aws configure set default.region $AWS_REGION
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
        - npm install -g serverless
      script:
        - aws s3 cp "s3://${S3_BUCKET_DEV}/${PROJECT_NAME}/${ARTIFACT}" ./
        - mkdir ${DIST_DIR}
        - unzip -q ${ARTIFACT} -d ${DIST_DIR}
        - cd ${DIST_DIR}
        # We have to use `sls deploy` without the package argument because
        # otherwise the zone name is already resolved.
        - export SLS_HOSTED_ZONE_NAME=dev.training.serverlessops.io
        - sls deploy -v
      after_script:
        # Ensure our creds are cleaned up.
        - rm -rf ~/.aws

    - stage: promote-to-prod
      language: python
      python: '3.6'
      install:
        - pip install awscli
        # Our SLS setup expects to find an AWS profile so let's just manage
        # our creds this way.
        - aws configure set default.region $AWS_REGION
      script:
        # fetch from Dev
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
        - aws s3 cp "s3://${S3_BUCKET_DEV}/${PROJECT_NAME}/${ARTIFACT}" ./
        # Send to prod
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_PROD
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PROD
        - aws s3 cp "${ARTIFACT}" "s3://${S3_BUCKET_PROD}/${PROJECT_NAME}/"

    - stage: deploy-prod
      sudo: required
      services:
        - docker
      language: python
      python: '3.6'
      install:
        - pip install awscli
        # Our SLS setup expects to find an AWS profile so let's just manage
        # our creds this way.
        - aws configure set default.region $AWS_REGION
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_PROD
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PROD
        - npm install -g serverless
      script:
        - aws s3 cp "s3://${S3_BUCKET_PROD}/${PROJECT_NAME}/${ARTIFACT}" ./
        - mkdir ${DIST_DIR}
        - unzip -q ${ARTIFACT} -d ${DIST_DIR}
        - cd ${DIST_DIR}
        # We have to use `sls deploy` without the package argument because
        # otherwise the zone name is already resolved.
        - export SLS_HOSTED_ZONE_NAME=prod.training.serverlessops.io
        - sls deploy -v -s prod
      after_script:
        # Ensure our creds are cleaned up.
        - rm -rf ~/.aws

